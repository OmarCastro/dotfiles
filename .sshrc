#!/usr/bin/env bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

shopt -s autocd

bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\eOA": history-search-backward'
bind '"\eOB": history-search-forward'

bind 'set show-all-if-ambiguous on'
bind 'set menu-complete-display-prefix on'
bind 'TAB: menu-complete'
bind '"\e[Z":menu-complete-backward'
bind 'set colored-completion-prefix on'
bind 'set colored-stats on'
bind 'set completion-ignore-case on'

[ -r ~/.bashrc ] && source ~/.bashrc

__powerline() {

    # Unicode symbols
    readonly PS_SYMBOL_DARWIN=''
    readonly PS_SYMBOL_LINUX='$'
    readonly PS_SYMBOL_OTHER='%'

    # Solarized colorscheme
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        readonly FG_BASE03="\[$(tput setaf 234)\]"
        readonly FG_BASE02="\[$(tput setaf 235)\]"
        readonly FG_BASE01="\[$(tput setaf 240)\]"
        readonly FG_BASE00="\[$(tput setaf 241)\]"
        readonly FG_BASE0="\[$(tput setaf 244)\]"
        #readonly FG_BASE1="\[$(tput setaf 245)\]"
        readonly FG_BASE1="\[$(tput setaf 4)\]"
        #readonly FG_BASE2="\[$(tput setaf 254)\]"
        readonly FG_BASE2="\[$(tput setaf 0)\]"
        readonly FG_BASE3="\[$(tput setaf 230)\]"
        readonly FG_BASE4="\[$(tput setaf 11)\]"

        readonly BG_BASE03="\[$(tput setab 234)\]"
        readonly BG_BASE02="\[$(tput setab 235)\]"
        readonly BG_BASE01="\[$(tput setab 240)\]"
        readonly BG_BASE00="\[$(tput setab 241)\]"
        readonly BG_BASE0="\[$(tput setab 244)\]"
        #readonly BG_BASE1="\[$(tput setab 245)\]"
        readonly BG_BASE1="\[$(tput setab 4)\]"
        #readonly BG_BASE2="\[$(tput setab 254)\]"
        readonly BG_BASE2="\[$(tput setab 0)\]"
        readonly BG_BASE3="\[$(tput setab 230)\]"
        readonly BG_BASE4="\[$(tput setab 11)\]"

        readonly FG_YELLOW="\[$(tput setaf 136)\]"
        readonly FG_ORANGE="\[$(tput setaf 166)\]"
        readonly FG_RED="\[$(tput setaf 160)\]"
        readonly FG_MAGENTA="\[$(tput setaf 125)\]"
        readonly FG_VIOLET="\[$(tput setaf 61)\]"
        readonly FG_BLUE="\[$(tput setaf 33)\]"
        readonly FG_CYAN="\[$(tput setaf 37)\]"
        readonly FG_GREEN="\[$(tput setaf 64)\]"

        readonly BG_YELLOW="\[$(tput setab 136)\]"
        readonly BG_ORANGE="\[$(tput setab 166)\]"
        readonly BG_RED="\[$(tput setab 160)\]"
        readonly BG_MAGENTA="\[$(tput setab 125)\]"
        readonly BG_VIOLET="\[$(tput setab 61)\]"
        readonly BG_BLUE="\[$(tput setab 33)\]"
        readonly BG_CYAN="\[$(tput setab 37)\]"
        readonly BG_GREEN="\[$(tput setab 64)\]"
     else
        readonly FG_BASE03="\[$(tput setaf 8)\]"
        readonly FG_BASE02="\[$(tput setaf 0)\]"
        readonly FG_BASE01="\[$(tput setaf 10)\]"
        readonly FG_BASE00="\[$(tput setaf 11)\]"
        readonly FG_BASE0="\[$(tput setaf 12)\]"
        readonly FG_BASE1="\[$(tput setaf 14)\]"
        readonly FG_BASE2="\[$(tput setaf 7)\]"
        readonly FG_BASE3="\[$(tput setaf 15)\]"

        readonly BG_BASE03="\[$(tput setab 8)\]"
        readonly BG_BASE02="\[$(tput setab 0)\]"
        readonly BG_BASE01="\[$(tput setab 10)\]"
        readonly BG_BASE00="\[$(tput setab 11)\]"
        readonly BG_BASE0="\[$(tput setab 12)\]"
        readonly BG_BASE1="\[$(tput setab 14)\]"
        readonly BG_BASE2="\[$(tput setab 7)\]"
        readonly BG_BASE3="\[$(tput setab 15)\]"

        readonly FG_YELLOW="\[$(tput setaf 3)\]"
        readonly FG_ORANGE="\[$(tput setaf 9)\]"
        readonly FG_RED="\[$(tput setaf 1)\]"
        readonly FG_MAGENTA="\[$(tput setaf 5)\]"
        readonly FG_VIOLET="\[$(tput setaf 13)\]"
        readonly FG_BLUE="\[$(tput setaf 4)\]"
        readonly FG_CYAN="\[$(tput setaf 6)\]"
        readonly FG_GREEN="\[$(tput setaf 2)\]"

        readonly BG_YELLOW="\[$(tput setab 3)\]"
        readonly BG_ORANGE="\[$(tput setab 9)\]"
        readonly BG_RED="\[$(tput setab 1)\]"
        readonly BG_MAGENTA="\[$(tput setab 5)\]"
        readonly BG_VIOLET="\[$(tput setab 13)\]"
        readonly BG_BLUE="\[$(tput setab 4)\]"
        readonly BG_CYAN="\[$(tput setab 6)\]"
        readonly BG_GREEN="\[$(tput setab 2)\]"
    fi

    readonly DIM="\[$(tput dim)\]"
    readonly REVERSE="\[$(tput rev)\]"
    readonly RESET="\[$(tput sgr0)\]"
    readonly BOLD="\[$(tput bold)\]"

    if [[ -z "$PS_SYMBOL" ]]; then
      case "$(uname)" in
          Darwin)
              PS_SYMBOL=$PS_SYMBOL_DARWIN
              ;;
          Linux)
              PS_SYMBOL=$PS_SYMBOL_LINUX
              ;;
          *)
              PS_SYMBOL=$PS_SYMBOL_OTHER
      esac
    fi

    ps0(){
        if [ "$BASH_COMMAND" != "ps1" ]; then
            PS0time=$(date +%s%3N)
        fi
    }

    ps1() {
        local RET="$?"
        local TIMESTAMP="$(date +%s%3N)"
        local PS1L="$BG_BASE1$FG_BASE2 \w $RESET"    
        local HOSTNAME="$(hostname)"    
        local TIME="$(date +%H:%M:%S)"

        # get text duration text
        local duration_PS1RHS=""
        local duration_PS1RHS_stripped=""
        if ! [ -z ${PS0time+x} ]; then
            local EXEC_TIME="$(( TIMESTAMP - PS0time))"
            unset PS0time

            local timeMillis=$(( EXEC_TIME % 1000 ))
            local timeSeconds=$(( (EXEC_TIME / 1000) % 60 ))
            local timeMinutes=$(( EXEC_TIME / 60000 ))
            local duration_text="$([[ $timeMinutes -eq "0" ]] && printf '%d.%03d' $timeSeconds $timeMillis || printf '%02d:%02d.%03d' $timeMinutes $timeSeconds $timeMillis)"
            duration_text="$duration_text Dur"
            duration_PS1RHS="$FG_BASE2$BG_BASE2$FG_BASE3 $duration_text"
            duration_PS1RHS_stripped="  $duration_text"
        fi

        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $RET -eq 0 ]; then
            local BG_EXIT="$BG_GREEN"
            local FG_EXIT="$FG_GREEN"
            local RET_CODE="✓"
        else
            local BG_EXIT="$BG_RED"
            local FG_EXIT="$FG_RED"
            local RET_CODE="$RET ↵"
        fi

        PS1L+="$FG_BASE1$BG_EXIT$FG_BASE3 $PS_SYMBOL $RESET$FG_EXIT$RESET "
	    local PS1RHS="$FG_EXIT$BG_EXIT$FG_BASE3 $RET_CODE $FG_VIOLET$BG_VIOLET$FG_BASE3 $HOSTNAME $duration_PS1RHS $FG_BASE3$BG_BASE3$FG_BASE2 $TIME "
        #local PS1LHS="$BG_MAGENTA$FG_BASE3$PS1RHSTEXT $FG_MAGENTA$BG_BASE1"
        local PS1LHS=""
        local PS1RHS_stripped=$(sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" <<<" $RET_CODE   $HOSTNAME $duration_PS1RHS_stripped   $TIME ")  
    
        # Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
        local Save='\e[s' # Save cursor position
        local Rest='\e[u' # Restore cursor to save point

        PS1="\[${Save}\e[${COLUMNS}C\e[${#PS1RHS_stripped}D${PS1RHS}${Rest}\]$RESET"
        PS1+="$PS1LHS\n"
        PS1+="$PS1L"
    }

    PROMPT_COMMAND=ps1
}

__powerline
unset __powerline

alias poweroff="echo you are running a SSH session, careful there"
alias reboot="echo you are running a SSH session, careful there"
alias halt="echo you are running a SSH session, careful there"
alias shutdown="echo you are running a SSH session, careful there"

trap "ps0" DEBUG