#!/usr/bin/env bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

shopt -s autocd

bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\eOA": history-search-backward'
bind '"\eOB": history-search-forward'

bind 'set show-all-if-ambiguous on'
bind 'set menu-complete-display-prefix on'
bind 'TAB: menu-complete'
bind '"\e[Z":menu-complete-backward'
bind 'set colored-completion-prefix on'
bind 'set colored-stats on'
bind 'set completion-ignore-case on'

[ -r ~/.bashrc ] && source ~/.bashrc

__powerline() {

    # Unicode symbols
    readonly PS_SYMBOL_DARWIN=''
    readonly PS_SYMBOL_LINUX='$'
    readonly PS_SYMBOL_OTHER='%'

    hex_to_rgb() {
      : "${1/\#}"
      ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))
      : "${2:-"%r %g %b"}"
      : "${_//%r/$r}"
      : "${_//%g/$g}"
      : "${_//%b/$b}"
      printf '%s\n' "$_"
    }

    set_bg_hex() {
      echo -e "$(hex_to_rgb "$1" '\x1b[48;2;%r;%g;%bm')"
    }

    set_fg_hex() {
      echo -e "$(hex_to_rgb "$1" '\x1b[38;2;%r;%g;%bm')"
    }

    readonly BG_REST="\[$(tput setab 0)\]"

    readonly FG_VIOLET="\[$(set_fg_hex '#533353')\]"
    readonly FG_GREEN="\[$(set_fg_hex '#335333')\]"
    readonly FG_RED="\[$(set_fg_hex '#b22222')\]"
    readonly FG_DBLUE="\[$(set_fg_hex '#002b36')\]"
    readonly FG_BLUE="\[$(set_fg_hex '#268bd2')\]"
    readonly FG_LGREEN="\[$(set_fg_hex '#b5bd68')\]"
    readonly FG_TEXTL="\[$(set_fg_hex '#dddddd')\]"
    readonly FG_TEXTD="\[$(set_fg_hex '#333333')\]"

    readonly BG_DBLUE="\[$(set_bg_hex '#002b36')\]"
    readonly BG_BLUE="\[$(set_bg_hex '#268bd2')\]"
    readonly BG_VIOLET="\[$(set_bg_hex '#533353')\]"
    readonly BG_RED="\[$(set_bg_hex '#b22222')\]"
    readonly BG_GREEN="\[$(set_bg_hex '#335333')\]"
    readonly BG_LGREEN="\[$(set_bg_hex '#b5bd68')\]"


    readonly DIM="\[$(tput dim)\]"
    readonly REVERSE="\[$(tput rev)\]"
    readonly RESET="\[$(tput sgr0)\]"
    readonly BOLD="\[$(tput bold)\]"
    readonly EL="\[$(echo -e '\x1b[K')\]" # erase line

    if [[ -z "$PS_SYMBOL" ]]; then
      case "$(uname)" in
          Darwin)
            PS_SYMBOL=$PS_SYMBOL_DARWIN
            ;;
          Linux)
            PS_SYMBOL=$PS_SYMBOL_LINUX
            ;;
          *)
            PS_SYMBOL=$PS_SYMBOL_OTHER
      esac
    fi

    ps0(){
        PS0='\[${PS1:$((PStimeStart=$(date +%s%3N), 0)):0}\]'
    }
    ps1() {
        local RET="$?"
        local TIMESTAMP="$(date +%s%3N)"
        local TIME="  $(date +%H:%M:%S)"

      # just some symbols to copy paste:    

	    local sep=""
        local sep2=""
        local block_duration=""
	      # get text duration text
        if [ -n ${PStimeStart:-""} ]; then
            local EXEC_TIME="$(( TIMESTAMP - PStimeStart))"
            export PStimeStart=""

            local timeMillis=$(( EXEC_TIME % 1000 ))
            local timeSeconds=$(( (EXEC_TIME / 1000) % 60 ))
            local timeMinutes=$(( EXEC_TIME / 60000 ))
            local duration_text="$([[ $timeMinutes -eq "0" ]] && printf '%d.%03d' $timeSeconds $timeMillis || printf '%02d:%02d.%03d' $timeMinutes $timeSeconds $timeMillis)"
            duration_text="$duration_text Dur"
        fi

        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $RET -eq 0 ]; then
            local BG_EXIT="$BG_GREEN"
            local FG_EXIT="$FG_GREEN"
            local RET_CODE="✓"
        else
            local BG_EXIT="$BG_RED"
            local FG_EXIT="$FG_RED"
            local RET_CODE="$RET ↵"
        fi

        local block_user_path="$BG_BLUE$FG_TEXTD  \u@\h $sep2 \w $FG_BLUE"
        local block_time="$BG_VIOLET$sep$FG_TEXTL $TIME $FG_VIOLET"
        if [ -n "$duration_text" ]; then
            local block_command_result="$BG_EXIT$sep$FG_TEXTL $duration_text $sep2 $RET_CODE $FG_EXIT"
        fi

        local PS1_top="$block_user_path$block_time$block_command_result$BG_REST$sep"	
        local PS1_bottom="$BOLD $PS_SYMBOL ❯ $RESET"

        PS1="$PS1_top$RESET\n$PS1_bottom"
    
    }
    ps2(){
        PS2="$BOLD...❯ $RESET"
    }
    ps0
    PROMPT_COMMAND=ps1
    ps2
}

function __has_param() {
    local terms="$1"
    shift

    for term in $terms; do
        for arg; do
            if [[ $arg == $term ]]; then
                return 0
            fi
        done
    done
    return 1
}

tail(){
  #adds colored line number when using --follow
  if __has_param '-f --follow -f*' "$@"; then
    command tail "$@" |  awk '{printf("\x1B[0;32m%6s║\x1B[0m %s\n", NR, $0)}'
  else
    command tail "$@"
  fi
}

__powerline
unset __powerline

systemctl(){
  if __has_param 'suspend suspend-then-hibernate poweroff reboot halt hibernate' "$@"; then
        echo "you are running a SSH session, careful there; run 'command systemctl $@' to ignore this"
    else
        command systemctl "$@"
    fi
}

alias poweroff="echo you are running a SSH session, careful there"
alias reboot="echo you are running a SSH session, careful there"
alias halt="echo you are running a SSH session, careful there"
alias shutdown="echo you are running a SSH session, careful there"